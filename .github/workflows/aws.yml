# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS with ALB integration,
# when there is a push to the main branch.

name: Deploy to Amazon ECS with ALB

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nutrisage-mlops
  ECS_SERVICE: nutrisage-api-service
  ECS_CLUSTER: nutrisage-cluster
  ECS_TASK_DEFINITION: nutrisage-api-task
  CONTAINER_NAME: nutrisage-api
  ALB_NAME: nutrisage-alb
  TARGET_GROUP_NAME: nutrisage-api-tg

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition
      id: task-def
      run: |
        cat > task-definition.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "${{ steps.build-image.outputs.image }}",
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "HOST",
                  "value": "0.0.0.0"
                },
                {
                  "name": "PORT",
                  "value": "8000"
                },
                {
                  "name": "DATA_SOURCE",
                  "value": "local"
                },
                {
                  "name": "MODEL_PATH",
                  "value": "/app/models/nutrition_grade_model.pkl"
                },
                {
                  "name": "METADATA_PATH",
                  "value": "/app/models/model_metadata.pkl"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/nutrisage-api",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3
              }
            }
          ]
        }
        EOF

    - name: Register task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://task-definition.json --region $AWS_REGION

    - name: Get target group ARN
      id: target-group
      run: |
        TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $TARGET_GROUP_NAME --region $AWS_REGION --query 'TargetGroups[0].TargetGroupArn' --output text)
        echo "target-group-arn=$TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

    - name: Deploy to ECS with ALB
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $ECS_TASK_DEFINITION \
          --load-balancers targetGroupArn=${{ steps.target-group.outputs.target-group-arn }},containerName=$CONTAINER_NAME,containerPort=8000 \
          --region $AWS_REGION

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --region $AWS_REGION

    - name: Get ALB DNS name
      id: alb-dns
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers --names $ALB_NAME --region $AWS_REGION --query 'LoadBalancers[0].DNSName' --output text)
        echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        echo "Testing ALB endpoint..."
        sleep 30  # Wait for ALB to register targets
        curl -f http://${{ steps.alb-dns.outputs.alb-dns }}/api/health || echo "Health check failed, but deployment may still be in progress"

    - name: Deployment summary
      run: |
        echo "ðŸŽ‰ Deployment completed!"
        echo "ðŸ“Š ALB DNS: ${{ steps.alb-dns.outputs.alb-dns }}"
        echo "ðŸ”— Health Check: http://${{ steps.alb-dns.outputs.alb-dns }}/api/health"
        echo "ðŸ”— API Docs: http://${{ steps.alb-dns.outputs.alb-dns }}/docs"
        echo "ðŸ”— Predict: http://${{ steps.alb-dns.outputs.alb-dns }}/api/predict" 